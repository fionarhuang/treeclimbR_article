
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> # === tool ========
> .libPaths(c(Sys.getenv('R_LIBS_1'), 
+             Sys.getenv('R_LIBS_2'),
+             Sys.getenv('R_LIBS_3')))
> .libPaths()
[1] "/home/Shared/Rlib/release-3.10-lib" "/usr/local/R/R-3.6.1/library"      
[3] "/home/fiona/tmp/R310_lib"          
> 
> suppressPackageStartupMessages({
+     library(TreeSummarizedExperiment)
+     library(treeclimbR)
+ })
Warning message:
In .getGeneric(f, where, package) :
  strings not representable in native encoding will be translated to UTF-8
> 
> # =========== source TreeInfer package ===================
> R.Version()
$platform
[1] "x86_64-pc-linux-gnu"

$arch
[1] "x86_64"

$os
[1] "linux-gnu"

$system
[1] "x86_64, linux-gnu"

$status
[1] ""

$major
[1] "3"

$minor
[1] "6.1"

$year
[1] "2019"

$month
[1] "07"

$day
[1] "05"

$`svn rev`
[1] "76782"

$language
[1] "R"

$version.string
[1] "R version 3.6.1 (2019-07-05)"

$nickname
[1] "Action of the Toes"

> 
> # ==== arguments from batch R===================
> argsList <- (commandArgs(trailingOnly = TRUE))
> argsList
[1] "inRDat='output/RData/parameter/US_100_sp25.RData'"
[2] "scriptP='code/Preparation/DataPrep.R'"            
[3] "parSet='output/RData/parameter/US_100_sp25.RData'"
[4] "outRDat='output/RData/DataPrep/US_100_sp25.RData'"
> for (i in seq_along(argsList)) {
+     if(length(argsList[[i]])>1){
+         assign(names(argsList)[i],argsList[[i]])
+     }else{eval(parse(text = argsList[[i]]))}
+ }
> 
> # ========== read in parameter value ================#
> print(inRDat)
[1] "output/RData/parameter/US_100_sp25.RData"
> load(inRDat)
> 
> set.seed(seedNum)
> 
> data("throat_v35")
> throat_v35 <- parEstimate(obj = throat_v35)
> lib <- apply(assays(throat_v35)[[1]], 2, sum)
> 
> 
> # ---------------------------------------------------------------------------
> # As the simulation is based on real data, it might not exist for two branches that fullfill the restricted requirements (e.g., branch size, fold changes) to swap; or it might exist too many possibilities under the specific requirement
> # Also, a tree structure naturally has more nodes with small descendant leaves than nodes with large descendant leaves. In this simulation, we would like to have signal branches at different sizes. 
> # Therefore, we use 'selNode' before 'simData' to speed up the simulation and to specificy the number of simulations at different size ranges of signal branches.
> # ---------------------------------------------------------------------------
> 
> lev <- cbind(seq(from = 1, by = 5, length.out = 10),
+              seq(from = 5, by = 5, length.out = 10))
> nr <- nrow(lev)
> # the number of nodes in the tree has the corresponding branch sizes 
> sapply(seq_len(nr), FUN = function(x) {
+     xx <- selNode(obj = throat_v35, minTip = lev[x, 1], 
+                   maxTip = lev[x, 2],  all = TRUE)
+     nrow(xx)
+ })
 [1] 537 170  64  40  25  16  11   7   5   5
> 
> # To speed up: randomly select 100 nodes
> selA <- sapply(seq_len(nr), FUN = function(x) {
+     xx <- selNode(obj = throat_v35, minTip = lev[x, 1], 
+                   maxTip = lev[x, 2],  all = TRUE)
+     sample(xx$nodeNum, 10, replace = TRUE)
+ })
> 
> 
> lse_list <- vector("list", nSIM)
> 
> i = 1
> while (i <= nSIM) {
+     message(i)
+     
+     # select a ratio randomly from the range below
+     fcRange <- seq(from = 2, to = 8, by = 0.01)
+     fc <- sample(fcRange, 1)
+     
+     # randomly select a branch from 'selA', and then randomly select another
+     # branches to swap. The swap should cause a fold change close to 'fc' that
+     # is randomly selected from 'fcRange'.
+     # Normally the true ratio is not exactly equal to the specified 'fc'. 
+     lse <- simData(obj = throat_v35,
+                    from.A = sample(selA, 1),
+                    ratio = fc,
+                    mu = lib,
+                    nSam = nSam,
+                    n = 1,
+                    scenario = scene,
+                    pct = pct)
+     
+     # the true ratio (for BS & SS)
+     true_ratio <- metadata(lse)$branch$ratio
+     
+     # for US:
+     # 1) requires the abundance ratio of two swapped branches is above 1.5 to 
+     #   have reasonable difference between two groups
+     if (scene %in% "US") {
+         FC <- metadata(lse)$FC
+         if (true_ratio > 1.5) {
+             lse_list[[i]] <- lse
+             i <- i + 1
+         }
+     }
+     
+     # for SS:
+     # 1) requires the fold change of two branches to be above 1.5 to have 
+     #    reasonable difference between two groups
+     if (scene %in% c("BS", "SS")) {
+         FC <- metadata(lse)$FC
+         uFC <- unique(FC[FC>1])
+         if (uFC > 1.5) {
+             lse_list[[i]] <- lse
+             i <- i + 1
+         }
+     }
+ }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
> 
> allNode <- showNode(tree = rowTree(throat_v35), only.leaf = FALSE)
> tse_list <- lapply(lse_list, FUN = function(x) {
+     aggValue(x = x, rowLevel = allNode, FUN = sum)
+ })
> 
> # if the file doesn't exist or was modified earlier than the R script
> if((!file.exists(outRDat)) | (file.mtime(outRDat) < file.mtime(scriptP))){
+     save(tse_list, file = outRDat)
+ }
> 
> 
> 
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.6 LTS

Matrix products: default
BLAS:   /usr/local/R/R-3.6.1/lib/libRblas.so
LAPACK: /usr/local/R/R-3.6.1/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C                 LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] treeclimbR_0.1.1               TreeSummarizedExperiment_1.3.1
 [3] SingleCellExperiment_1.8.0     SummarizedExperiment_1.16.0   
 [5] DelayedArray_0.12.0            BiocParallel_1.20.0           
 [7] matrixStats_0.55.0             Biobase_2.46.0                
 [9] GenomicRanges_1.38.0           GenomeInfoDb_1.22.0           
[11] IRanges_2.20.0                 S4Vectors_0.24.0              
[13] BiocGenerics_0.32.0           

loaded via a namespace (and not attached):
  [1] TH.data_1.0-10              minqa_1.2.4                
  [3] colorspace_1.4-1            rjson_0.2.20               
  [5] dirmult_0.1.3-4             mclust_5.4.5               
  [7] circlize_0.4.8              corpcor_1.6.9              
  [9] XVector_0.26.0              GlobalOptions_0.1.1        
 [11] base64enc_0.1-3             clue_0.3-57                
 [13] hexbin_1.27.3               IDPmisc_1.1.19             
 [15] CytoML_1.12.0               mvtnorm_1.0-11             
 [17] codetools_0.2-16            splines_3.6.1              
 [19] R.methodsS3_1.7.1           mnormt_1.5-5               
 [21] robustbase_0.93-5           zeallot_0.1.0              
 [23] jsonlite_1.6                nloptr_1.2.1               
 [25] cluster_2.1.0               png_0.1-7                  
 [27] R.oo_1.23.0                 graph_1.64.0               
 [29] rrcov_1.4-7                 compiler_3.6.1             
 [31] backports_1.1.5             assertthat_0.2.1           
 [33] Matrix_1.2-17               lazyeval_0.2.2             
 [35] limma_3.42.0                tools_3.6.1                
 [37] ncdfFlow_2.32.0             igraph_1.2.4.1             
 [39] gtable_0.3.0                glue_1.3.1                 
 [41] GenomeInfoDbData_1.2.2      flowWorkspace_3.34.0       
 [43] reshape2_1.4.3              dplyr_0.8.3                
 [45] ggcyto_1.14.0               Rcpp_1.0.2                 
 [47] vctrs_0.2.0                 ape_5.3                    
 [49] nlme_3.1-140                stringr_1.4.0              
 [51] lme4_1.1-21                 lifecycle_0.1.0            
 [53] gtools_3.8.1                XML_3.98-1.20              
 [55] edgeR_3.28.0                DEoptimR_1.0-8             
 [57] zlibbioc_1.32.0             MASS_7.3-51.4              
 [59] zoo_1.8-6                   scales_1.0.0               
 [61] RBGL_1.62.1                 sandwich_2.5-1             
 [63] RColorBrewer_1.1-2          ComplexHeatmap_2.2.0       
 [65] yaml_2.2.0                  gridExtra_2.3              
 [67] ggplot2_3.2.1               latticeExtra_0.6-28        
 [69] stringi_1.4.3               pcaPP_1.9-73               
 [71] flowClust_3.24.0            flowCore_1.52.0            
 [73] boot_1.3-22                 shape_1.4.4                
 [75] flowViz_1.50.0              rlang_0.4.1                
 [77] pkgconfig_2.0.3             bitops_1.0-6               
 [79] fda_2.4.8                   lattice_0.20-38            
 [81] purrr_0.3.3                 ks_1.11.6                  
 [83] tidyselect_0.2.5            plyr_1.8.4                 
 [85] magrittr_1.5                R6_2.4.0                   
 [87] multcomp_1.4-10             pillar_1.4.2               
 [89] survival_2.44-1.1           RCurl_1.95-4.12            
 [91] FlowSOM_1.18.0              tibble_2.1.3               
 [93] tsne_0.1-3                  crayon_1.3.4               
 [95] KernSmooth_2.23-15          ellipse_0.4.1              
 [97] GetoptLong_0.1.7            locfit_1.5-9.1             
 [99] grid_3.6.1                  diffcyt_1.6.0              
[101] data.table_1.12.6           Rgraphviz_2.30.0           
[103] ConsensusClusterPlus_1.50.0 digest_0.6.22              
[105] tidyr_1.0.0                 R.utils_2.9.0              
[107] flowStats_3.44.0            RcppParallel_4.4.4         
[109] munsell_0.5.0               openCyto_1.24.0            
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
499.616  17.108 517.239 
