
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> # === tool ========
> .libPaths(c(Sys.getenv('R_LIBS_1'), 
+             Sys.getenv('R_LIBS_2'),
+             Sys.getenv('R_LIBS_3')))
> .libPaths()
[1] "/home/Shared/Rlib/release-3.10-lib" "/usr/local/R/R-3.6.1/library"      
[3] "/home/fiona/tmp/R310_lib"          
> 
> suppressPackageStartupMessages({
+     library(TreeSummarizedExperiment)
+     library(treeclimbR)
+     library(dplyr)
+ })
Warning message:
In .getGeneric(f, where, package) :
  strings not representable in native encoding will be translated to UTF-8
> 
> R.Version()
$platform
[1] "x86_64-pc-linux-gnu"

$arch
[1] "x86_64"

$os
[1] "linux-gnu"

$system
[1] "x86_64, linux-gnu"

$status
[1] ""

$major
[1] "3"

$minor
[1] "6.1"

$year
[1] "2019"

$month
[1] "07"

$day
[1] "05"

$`svn rev`
[1] "76782"

$language
[1] "R"

$version.string
[1] "R version 3.6.1 (2019-07-05)"

$nickname
[1] "Action of the Toes"

> # ==== arguments from batch R=====================
> argsList <- (commandArgs(trailingOnly = TRUE))
> argsList
[1] "inRDat='/home/fiona/phd/treeclimbR_article/simulation_microbe/output/RData/DataPrep/BS_sp50_sim5_r4_L2.RData'"            
[2] "outRDat='/home/fiona/phd/treeclimbR_article/simulation_microbe/output/RData/Analysis/BS_sp50_sim5_r4_L2/treeclimbR.RData'"
> for (i in seq_along(argsList)) {
+     if(length(argsList[[i]])>1){
+         assign(names(argsList)[i],argsList[[i]])
+     }else{eval(parse(text = argsList[[i]]))}
+ }
> 
> ## === load data from data preparation step ======
> load(inRDat)
> 
> ## === differential abundance test using edgeR ===
> (nSIM <- length(assays(tse)))
[1] 5
> system.time({
+     # data analysis: get p value
+     message("Calculating p values ...")
+     out <- lapply(seq_len(nSIM), FUN = function(x) {
+         cat(x, "out of ", nSIM, "has been done", "\n")
+         res <- runDA(TSE = tse, feature_on_row = TRUE, 
+                      assay = x, option = "glm", 
+                      filter_min_count = 1, 
+                      normalize = TRUE, group_column = "group",
+                      design_terms = "group")
+         out <- nodeResult(object = res, n = Inf)
+         return(out)
+     })
+     
+     # get candidate levels
+     cand <- lapply(seq_along(out), FUN = function(x) {
+         cat("searching for candidates: ", x,
+             " out of ", nSIM, " simulations ...\n")
+         lev <- getCand(tree = rowTree(tse), 
+                        score_data = out[[x]],
+                        node_column = "node",
+                        sign_column = "logFC", 
+                        p_column = "PValue",
+                        message = FALSE)
+         return(lev)
+     })
+     
+     # find and test on the best level
+     limit_rej <- c(0.01, 0.05, 0.1)
+     best <- vector("list", length(limit_rej))
+     names(best) <- limit_rej
+     for (i in seq_along(limit_rej)) {
+         best[[i]] <- lapply(seq_along(out),
+                             FUN = function(x) {
+             cat("get the best: ", x, " out of ", 
+                 nSIM, " simulations ...\n")
+             xx <- evalCand(tree = rowTree(tse), 
+                           levels = cand[[x]]$candidate_list,
+                           score_data = out[[x]], 
+                           node_column = "node", 
+                           sign_column = "logFC",
+                           p_column = "PValue", 
+                           method = "BH", 
+                           limit_rej = limit_rej[i], 
+                           use_pseudo_leaf = FALSE)
+             return(xx)
+         })
+     }
+     
+     
+    
+ outsel_0.01 <- lapply(best$`0.01`, FUN = function(x) {
+     x$output })
+ 
+ outsel_0.05 <- lapply(best$`0.05`, FUN = function(x) {
+     x$output })
+ 
+ outsel_0.1 <- lapply(best$`0.1`, FUN = function(x) {
+     x$output })
+ })
Calculating p values ...
1 out of  5 has been done 
2 out of  5 has been done 
3 out of  5 has been done 
4 out of  5 has been done 
5 out of  5 has been done 
searching for candidates:  1  out of  5  simulations ...
searching for candidates:  2  out of  5  simulations ...
searching for candidates:  3  out of  5  simulations ...
searching for candidates:  4  out of  5  simulations ...
searching for candidates:  5  out of  5  simulations ...
get the best:  1  out of  5  simulations ...
get the best:  2  out of  5  simulations ...
get the best:  3  out of  5  simulations ...
get the best:  4  out of  5  simulations ...
get the best:  5  out of  5  simulations ...
get the best:  1  out of  5  simulations ...
get the best:  2  out of  5  simulations ...
get the best:  3  out of  5  simulations ...
get the best:  4  out of  5  simulations ...
get the best:  5  out of  5  simulations ...
get the best:  1  out of  5  simulations ...
get the best:  2  out of  5  simulations ...
get the best:  3  out of  5  simulations ...
get the best:  4  out of  5  simulations ...
get the best:  5  out of  5  simulations ...
   user  system elapsed 
642.264   7.028 650.078 
> 
> save(out, cand, best, outsel_0.01, outsel_0.05, outsel_0.1, 
+      file = outRDat)
> 
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.6 LTS

Matrix products: default
BLAS:   /usr/local/R/R-3.6.1/lib/libRblas.so
LAPACK: /usr/local/R/R-3.6.1/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C                 LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] dplyr_0.8.3                    treeclimbR_0.1.1              
 [3] TreeSummarizedExperiment_1.3.1 SingleCellExperiment_1.8.0    
 [5] SummarizedExperiment_1.16.0    DelayedArray_0.12.0           
 [7] BiocParallel_1.20.0            matrixStats_0.55.0            
 [9] Biobase_2.46.0                 GenomicRanges_1.38.0          
[11] GenomeInfoDb_1.22.0            IRanges_2.20.0                
[13] S4Vectors_0.24.0               BiocGenerics_0.32.0           

loaded via a namespace (and not attached):
  [1] TH.data_1.0-10              minqa_1.2.4                
  [3] colorspace_1.4-1            rjson_0.2.20               
  [5] dirmult_0.1.3-4             mclust_5.4.5               
  [7] circlize_0.4.8              corpcor_1.6.9              
  [9] XVector_0.26.0              GlobalOptions_0.1.1        
 [11] base64enc_0.1-3             clue_0.3-57                
 [13] hexbin_1.27.3               IDPmisc_1.1.19             
 [15] CytoML_1.12.0               mvtnorm_1.0-11             
 [17] codetools_0.2-16            splines_3.6.1              
 [19] R.methodsS3_1.7.1           mnormt_1.5-5               
 [21] robustbase_0.93-5           zeallot_0.1.0              
 [23] jsonlite_1.6                nloptr_1.2.1               
 [25] cluster_2.1.0               png_0.1-7                  
 [27] R.oo_1.23.0                 graph_1.64.0               
 [29] rrcov_1.4-7                 compiler_3.6.1             
 [31] backports_1.1.5             assertthat_0.2.1           
 [33] Matrix_1.2-17               lazyeval_0.2.2             
 [35] limma_3.42.0                tools_3.6.1                
 [37] ncdfFlow_2.32.0             igraph_1.2.4.1             
 [39] gtable_0.3.0                glue_1.3.1                 
 [41] GenomeInfoDbData_1.2.2      flowWorkspace_3.34.0       
 [43] reshape2_1.4.3              ggcyto_1.14.0              
 [45] Rcpp_1.0.2                  vctrs_0.2.0                
 [47] ape_5.3                     nlme_3.1-140               
 [49] stringr_1.4.0               lme4_1.1-21                
 [51] lifecycle_0.1.0             gtools_3.8.1               
 [53] XML_3.98-1.20               edgeR_3.28.0               
 [55] DEoptimR_1.0-8              zlibbioc_1.32.0            
 [57] MASS_7.3-51.4               zoo_1.8-6                  
 [59] scales_1.0.0                RBGL_1.62.1                
 [61] sandwich_2.5-1              RColorBrewer_1.1-2         
 [63] ComplexHeatmap_2.2.0        yaml_2.2.0                 
 [65] gridExtra_2.3               ggplot2_3.2.1              
 [67] latticeExtra_0.6-28         stringi_1.4.3              
 [69] pcaPP_1.9-73                flowClust_3.24.0           
 [71] flowCore_1.52.0             boot_1.3-22                
 [73] shape_1.4.4                 flowViz_1.50.0             
 [75] rlang_0.4.1                 pkgconfig_2.0.3            
 [77] bitops_1.0-6                fda_2.4.8                  
 [79] lattice_0.20-38             purrr_0.3.3                
 [81] ks_1.11.6                   tidyselect_0.2.5           
 [83] plyr_1.8.4                  magrittr_1.5               
 [85] R6_2.4.0                    multcomp_1.4-10            
 [87] pillar_1.4.2                survival_2.44-1.1          
 [89] RCurl_1.95-4.12             FlowSOM_1.18.0             
 [91] tibble_2.1.3                tsne_0.1-3                 
 [93] crayon_1.3.4                KernSmooth_2.23-15         
 [95] ellipse_0.4.1               GetoptLong_0.1.7           
 [97] locfit_1.5-9.1              grid_3.6.1                 
 [99] diffcyt_1.6.0               data.table_1.12.6          
[101] Rgraphviz_2.30.0            ConsensusClusterPlus_1.50.0
[103] digest_0.6.22               tidyr_1.0.0                
[105] R.utils_2.9.0               flowStats_3.44.0           
[107] RcppParallel_4.4.4          munsell_0.5.0              
[109] openCyto_1.24.0            
> 
> proc.time()
   user  system elapsed 
658.580   8.152 667.541 
