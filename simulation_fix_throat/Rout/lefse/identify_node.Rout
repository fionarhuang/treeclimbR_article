
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> # === tool ========
> .libPaths(c(Sys.getenv('R_LIBS_1'), 
+             Sys.getenv('R_LIBS_2'),
+             Sys.getenv('R_LIBS_3')))
> .libPaths()
[1] "/home/Shared/Rlib/release-3.10-lib" "/usr/local/R/R-3.6.1/library"      
[3] "/home/fiona/tmp/R310_lib"          
> 
> suppressPackageStartupMessages({
+     library(stringr)
+     library(TreeSummarizedExperiment)
+     library(dplyr)
+ })
> 
> R.Version()
$platform
[1] "x86_64-pc-linux-gnu"

$arch
[1] "x86_64"

$os
[1] "linux-gnu"

$system
[1] "x86_64, linux-gnu"

$status
[1] ""

$major
[1] "3"

$minor
[1] "6.1"

$year
[1] "2019"

$month
[1] "07"

$day
[1] "05"

$`svn rev`
[1] "76782"

$language
[1] "R"

$version.string
[1] "R version 3.6.1 (2019-07-05)"

$nickname
[1] "Action of the Toes"

> # ==== arguments from batch R=====================
> argsList <- (commandArgs(trailingOnly = TRUE))
> argsList
[1] "resPath='output/RData/lefse/res'"                 
[2] "outDat='output/RData/lefse/out_lefse.RData'"      
[3] "inDat='output/RData/lefse/SS_100_sp25/tree.RData'"
> for (i in seq_along(argsList)) {
+     if(length(argsList[[i]])>1){
+         assign(names(argsList)[i],argsList[[i]])
+     }else{eval(parse(text = argsList[[i]]))}
+ }
> 
> ## ===============================================
> 
> print(inDat)
[1] "output/RData/lefse/SS_100_sp25/tree.RData"
> print(outDat)
[1] "output/RData/lefse/out_lefse.RData"
> 
> 
> 
> 
> # folder path: store .res files generated by lefse
> print(resPath)
[1] "output/RData/lefse/res"
> 
> # load tree
> load(inDat)
> 
> # a function to remove ancestors
> rm_ancestor <- function(node, tree) {
+     if (!length(node)) {
+         node
+     } else {
+         loc <- node
+         # each row is a path connecting a leaf to the root
+         mat <- matTree(tree = tree)
+         # which paths are detected nodes on?
+         lat <- lapply(loc, FUN = function(x){
+             which(mat == x, arr.ind = TRUE)
+         })
+         lat1 <- do.call(rbind.data.frame, lat)
+         lat1 <- lat1 %>% 
+             group_by(row) %>% 
+             arrange(col) %>%
+             as.matrix()
+         
+         # nodes in paths where exist only one detected nodes
+         lat2 <- lat1[!duplicated(lat1[, 1]), ]
+         k2 <- unique(mat[lat2])
+         # nodes in paths where exist more one detected nodes
+         # (node that is closest to the leaf level not included)
+         lat3 <- lat1[duplicated(lat1[, 1]), ]
+         k3 <- unique(mat[lat3])
+         
+         # remove nodes 
+         kk <- intersect(k2, k3)
+         setdiff(loc, kk)  
+     }
+ }
> # a function to extract nodes identified by lefse
> loc_fun <- function(x, tree, reso = "high") {
+     res <- read.delim(file.path(resPath, x), header=FALSE)
+     colnames(res) <- c("taxon", "log.max.pct", "direction", "lda", "p.value")
+     
+     suppressWarnings({
+         res_f <- res %>%
+             mutate(p.value = as.numeric(as.character(p.value))) %>%
+             filter(!is.na(p.value))
+         
+     })
+     
+     nodeS <- gsub(pattern = ".*\\.", replacement = "", x = res_f$taxon)
+     nodeS <- transNode(tree = tree, node = nodeS)
+     
+     if (reso == "high") {
+         rm_ancestor(node = nodeS, tree = tree)
+     } else {
+         nodeS
+     }
+     
+ }
> 
> # all .res files
> files <- list.files(resPath)
> 
> # each file stores results of a simulation at a specified FDR
> df <- data.frame(file = files) %>%
+     mutate(fdr = str_match(file, "@(.*?)\\.res")[,2],
+            fdr = as.numeric(as.character(fdr)),
+            main = gsub(pattern = "_rep.*", "", file),
+            rep = str_match(file, "_rep(.*?)@")[,2]) 
> 
> # extract nodes from each file
> df_scene <- split(df, df$main)    
> out_lefse_high <- lapply(df_scene, FUN = function(x) {
+     xx <- split(x, x$fdr)
+     xy <- lapply(xx, FUN = function(y){
+         lapply(y$file, FUN = function(z){
+             loc_fun(z, tree = tree, reso = "high")
+         })
+     })
+     xy
+ })
> 
> out_lefse_low <- lapply(df_scene, FUN = function(x) {
+     xx <- split(x, x$fdr)
+     xy <- lapply(xx, FUN = function(y){
+         lapply(y$file, FUN = function(z){
+             loc_fun(z, tree = tree, reso = "low")
+         })
+     })
+     xy
+ })
> save(out_lefse_low, out_lefse_high, file = outDat)
> 
> 
> 
> proc.time()
    user   system  elapsed 
1124.940    6.220 1132.081 
